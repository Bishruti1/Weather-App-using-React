{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","cityname","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","error","role","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","city","target","elements","value","country","fetch","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.912e0986.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./weather.css\";\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-white\">\r\n            <div className='Card'>\r\n                <h1 className='text-white py-3'>{props.cityname}</h1>\r\n                <h5 className='py-4'>\r\n                    <i className={`wi ${props.weatherIcon} display-1`} />\r\n                </h5>\r\n                {props.temp_celsius ? (\r\n                    <h1 className='py-2'>{props.temp_celsius}&deg;</h1>) : null}\r\n                {/** show min max temp */}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n                {/* Weather description */}\r\n                <h4 className=\"py-3\"> \r\n                {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)} </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className='px-4'>{min}&deg;</span>\r\n                <span className='px-4'>{max}&deg;</span>\r\n            </h3>\r\n        );\r\n\r\n    }\r\n};\r\n","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className='container h-100'>\r\n            <form onSubmit={props.loadweather}>\r\n                <div> {props.error ? error() : ''} </div>\r\n                <div className='row'>\r\n                    <div className='col-md-3 offset-md-2'>\r\n                        <input type='text' \r\n                        className='form-control' \r\n                        name='city' autoComplete='off' \r\n                        placeholder='City'/>\r\n                    </div>\r\n                    <div className='col-md-3'>\r\n                        <input type='text' \r\n                        className='form-control' \r\n                        name='country' \r\n                        autoComplete='off' \r\n                        placeholder='Country'/>\r\n                    </div>\r\n                    <div className='col-md-3 mt-md-0 text-md-left'>\r\n                        <button className='btn btn-warning'>Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst error = props => {\r\n    return (\r\n        <div className=\"alert alert-danget mx-5\" role='alert'>\r\n            Please enter city and country</div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './app_component/form.component.jsx';\n\nconst apiKey = \"96bce385dd1a961f5613cbc9f557aeec\";\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n\n    };\n    // this.getWeather();\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: 'wi-strom-showers',\n      Snow: \"wi-snow\",\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-ay-sunny',\n      Clouds: 'wi-day-fog'\n\n    };\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: icons.Thunderstorm })\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: icons.Drizzle })\n        break;\n      case rangeID >= 500 && rangeID <= 521:\n        this.setState({ icon: icons.Rain })\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: icons.Snow })\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: icons.Atmosphere })\n        break;\n      case rangeID === 800:\n        this.setState({ icon: icons.Clear })\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: icons.Clouds })\n        break;\n      default:\n        this.setState({ icon: icons.Clouds })\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n\n    e.preventDefault();\n\n    const city= e.target.elements.city.value;\n    const country= e.target.elements.country.value;\n\n    if(city && country) {\n      const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`);\n    // 96bce385dd1a961f5613cbc9f557aeec\n    \n\n    const response = await api_call.json();\n\n\n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      country: response.sys.country,\n      main: response.weather[0].main,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    });\n\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    console.log(response);\n  }\n  else{\n    this.setState({error:true});\n  }\n\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}